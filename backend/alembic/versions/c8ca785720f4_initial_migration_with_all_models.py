"""Initial migration with all models

Revision ID: c8ca785720f4
Revises: 
Create Date: 2025-09-09 00:15:32.659686

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c8ca785720f4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_verifications')
    op.drop_table('cities')
    op.drop_table('spatial_ref_sys')
    op.drop_table('conversations')
    op.drop_table('payment_methods')
    op.drop_table('messages')
    op.drop_table('order_status_history')
    op.drop_table('users')
    op.drop_table('transactions')
    op.drop_table('password_reset_tokens')
    op.drop_table('reviews')
    op.drop_table('notification_preferences')
    op.drop_table('countries')
    op.drop_table('offers')
    op.drop_table('escrow_holdings')
    op.drop_table('user_sessions')
    op.drop_table('orders')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('orders',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('shopper_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('product_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('product_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('product_currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('destination_country', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('destination_city_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('destination_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('destination_coordinates', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('deadline_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('preferred_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reward_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('reward_currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('platform_fee', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'active', 'matched', 'purchased', 'in_transit', 'delivered', 'completed', 'cancelled', 'disputed', name='order_status'), server_default=sa.text("'draft'::order_status"), autoincrement=False, nullable=False),
    sa.Column('special_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('weight_estimate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('size_description', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('matched_traveler_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('matched_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('purchased_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('shipped_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint('deadline_date >= CURRENT_DATE AND (preferred_delivery_date IS NULL OR preferred_delivery_date >= CURRENT_DATE)', name='orders_dates_check'),
    sa.CheckConstraint('reward_amount > 0::numeric AND total_cost > 0::numeric AND (platform_fee IS NULL OR platform_fee >= 0::numeric)', name='orders_positive_amounts'),
    sa.ForeignKeyConstraint(['destination_city_id'], ['cities.id'], name='orders_destination_city_id_fkey'),
    sa.ForeignKeyConstraint(['destination_country'], ['countries.code'], name='orders_destination_country_fkey'),
    sa.ForeignKeyConstraint(['matched_traveler_id'], ['users.id'], name='orders_matched_traveler_id_fkey'),
    sa.ForeignKeyConstraint(['shopper_id'], ['users.id'], name='orders_shopper_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_sessions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_sessions_pkey')
    )
    op.create_table('escrow_holdings',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=False),
    sa.Column('auto_release_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('released_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('released_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('release_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='escrow_holdings_order_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['released_by'], ['users.id'], name='escrow_holdings_released_by_fkey'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name='escrow_holdings_transaction_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='escrow_holdings_pkey')
    )
    op.create_table('offers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('traveler_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proposed_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('travel_route', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'withdrawn', 'accepted', 'expired', name='offer_status'), server_default=sa.text("'active'::offer_status"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint('proposed_delivery_date >= CURRENT_DATE', name='offers_future_delivery'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='offers_order_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['traveler_id'], ['users.id'], name='offers_traveler_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='offers_pkey'),
    sa.UniqueConstraint('order_id', 'traveler_id', name='offers_order_id_traveler_id_key')
    )
    op.create_table('countries',
    sa.Column('code', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('phone_prefix', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('code', name='countries_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('notification_preferences',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('push_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('sms_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('order_updates', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('new_offers', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('payment_updates', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('messages', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('reviews', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('marketing', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notification_preferences_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notification_preferences_pkey'),
    sa.UniqueConstraint('user_id', name='notification_preferences_user_id_key')
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reviewer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reviewee_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reviewer_role', postgresql.ENUM('shopper', 'traveler', 'both', 'admin', name='user_role'), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_flagged', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('moderated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('moderated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='reviews_rating_check'),
    sa.ForeignKeyConstraint(['moderated_by'], ['users.id'], name='reviews_moderated_by_fkey'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='reviews_order_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewee_id'], ['users.id'], name='reviews_reviewee_id_fkey'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name='reviews_reviewer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reviews_pkey'),
    sa.UniqueConstraint('order_id', 'reviewer_id', 'reviewee_id', name='reviews_order_id_reviewer_id_reviewee_id_key')
    )
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='password_reset_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='password_reset_tokens_pkey')
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('payer_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recipient_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('payment_method_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('transaction_type', postgresql.ENUM('order_payment', 'platform_fee', 'traveler_payout', 'refund', 'dispute_resolution', name='transaction_type'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'authorized', 'captured', 'refunded', 'failed', 'cancelled', name='payment_status'), server_default=sa.text("'pending'::payment_status"), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('provider_transaction_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('provider_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('platform_fee', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('processing_fee', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('net_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('authorized_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('captured_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('failure_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount > 0::numeric', name='transactions_positive_amount'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='transactions_order_id_fkey'),
    sa.ForeignKeyConstraint(['payer_id'], ['users.id'], name='transactions_payer_id_fkey'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], name='transactions_payment_method_id_fkey'),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], name='transactions_recipient_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('shopper', 'traveler', 'both', 'admin', name='user_role'), server_default=sa.text("'both'::user_role"), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'suspended', 'deactivated', 'pending_verification', name='user_status'), server_default=sa.text("'pending_verification'::user_status"), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('primary_country', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('primary_city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('phone_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('identity_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('payment_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('preferred_language', sa.VARCHAR(length=5), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('preferred_currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('shopper_rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('shopper_review_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('traveler_rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('traveler_review_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_orders_as_shopper', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_orders_as_traveler', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint("email::text ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'::text", name='users_email_check'),
    sa.CheckConstraint('shopper_rating >= 0::numeric AND shopper_rating <= 5::numeric AND traveler_rating >= 0::numeric AND traveler_rating <= 5::numeric', name='users_rating_check'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('order_status_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('old_status', postgresql.ENUM('draft', 'active', 'matched', 'purchased', 'in_transit', 'delivered', 'completed', 'cancelled', 'disputed', name='order_status'), autoincrement=False, nullable=True),
    sa.Column('new_status', postgresql.ENUM('draft', 'active', 'matched', 'purchased', 'in_transit', 'delivered', 'completed', 'cancelled', 'disputed', name='order_status'), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], name='order_status_history_changed_by_fkey'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='order_status_history_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='order_status_history_pkey')
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_type', postgresql.ENUM('text', 'image', 'document', 'system', 'location', name='message_type'), server_default=sa.text("'text'::message_type"), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('media_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name='messages_conversation_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='messages_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='messages_pkey')
    )
    op.create_table('payment_methods',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider_payment_method_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('card_last_four', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('card_brand', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('expires_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expires_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payment_methods_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='payment_methods_pkey')
    )
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shopper_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('traveler_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('unlocked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='conversations_order_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shopper_id'], ['users.id'], name='conversations_shopper_id_fkey'),
    sa.ForeignKeyConstraint(['traveler_id'], ['users.id'], name='conversations_traveler_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='conversations_pkey'),
    sa.UniqueConstraint('order_id', 'shopper_id', 'traveler_id', name='conversations_order_id_shopper_id_traveler_id_key')
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('cities',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('country_code', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('location', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_code'], ['countries.code'], name='cities_country_code_fkey'),
    sa.PrimaryKeyConstraint('id', name='cities_pkey'),
    sa.UniqueConstraint('name', 'country_code', name='cities_name_country_code_key')
    )
    op.create_table('user_verifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('verification_type', postgresql.ENUM('email', 'phone', 'identity', 'payment_method', name='verification_type'), autoincrement=False, nullable=False),
    sa.Column('verification_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_verifications_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_verifications_pkey')
    )
    # ### end Alembic commands ###
